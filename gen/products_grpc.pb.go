// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: products.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductsAPIClient is the client API for ProductsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsAPIClient interface {
	// Get all products
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	// Get product by transaction id
	GetProductByTransactionId(ctx context.Context, in *GetProductByTransactionIdRequest, opts ...grpc.CallOption) (*GetProductByTransactionIdResponse, error)
	// Get product by id
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	// Add new product
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
	// Update product
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
}

type productsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsAPIClient(cc grpc.ClientConnInterface) ProductsAPIClient {
	return &productsAPIClient{cc}
}

func (c *productsAPIClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, "/pb.productsAPI/ListProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsAPIClient) GetProductByTransactionId(ctx context.Context, in *GetProductByTransactionIdRequest, opts ...grpc.CallOption) (*GetProductByTransactionIdResponse, error) {
	out := new(GetProductByTransactionIdResponse)
	err := c.cc.Invoke(ctx, "/pb.productsAPI/GetProductByTransactionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsAPIClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, "/pb.productsAPI/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsAPIClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, "/pb.productsAPI/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsAPIClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, "/pb.productsAPI/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsAPIServer is the server API for ProductsAPI service.
// All implementations should embed UnimplementedProductsAPIServer
// for forward compatibility
type ProductsAPIServer interface {
	// Get all products
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	// Get product by transaction id
	GetProductByTransactionId(context.Context, *GetProductByTransactionIdRequest) (*GetProductByTransactionIdResponse, error)
	// Get product by id
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	// Add new product
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	// Update product
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
}

// UnimplementedProductsAPIServer should be embedded to have forward compatible implementations.
type UnimplementedProductsAPIServer struct {
}

func (UnimplementedProductsAPIServer) ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedProductsAPIServer) GetProductByTransactionId(context.Context, *GetProductByTransactionIdRequest) (*GetProductByTransactionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByTransactionId not implemented")
}
func (UnimplementedProductsAPIServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductsAPIServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedProductsAPIServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}

// UnsafeProductsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsAPIServer will
// result in compilation errors.
type UnsafeProductsAPIServer interface {
	mustEmbedUnimplementedProductsAPIServer()
}

func RegisterProductsAPIServer(s grpc.ServiceRegistrar, srv ProductsAPIServer) {
	s.RegisterService(&ProductsAPI_ServiceDesc, srv)
}

func _ProductsAPI_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsAPIServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.productsAPI/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsAPIServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsAPI_GetProductByTransactionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByTransactionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsAPIServer).GetProductByTransactionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.productsAPI/GetProductByTransactionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsAPIServer).GetProductByTransactionId(ctx, req.(*GetProductByTransactionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsAPI_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsAPIServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.productsAPI/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsAPIServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsAPI_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsAPIServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.productsAPI/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsAPIServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductsAPI_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsAPIServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.productsAPI/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsAPIServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductsAPI_ServiceDesc is the grpc.ServiceDesc for ProductsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.productsAPI",
	HandlerType: (*ProductsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProducts",
			Handler:    _ProductsAPI_ListProducts_Handler,
		},
		{
			MethodName: "GetProductByTransactionId",
			Handler:    _ProductsAPI_GetProductByTransactionId_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ProductsAPI_GetProduct_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _ProductsAPI_AddProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductsAPI_UpdateProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "products.proto",
}
